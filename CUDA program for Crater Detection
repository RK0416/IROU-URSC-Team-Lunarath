import os
import cv2
import numpy as np
import pycuda.driver as cuda
import pycuda.autoinit
from pycuda.compiler import SourceModule
import Jetson.GPIO as GPIO
import time
from queue import Queue
from threading import Thread

# GPIO setup for navigation control (example GPIO pins, adjust as necessary)
motor_pins = {
    'left_front_forward': 17,
    'left_front_backward': 18,
    'right_front_forward': 27,
    'right_front_backward': 22,
    'left_rear_forward': 23,
    'left_rear_backward': 24,
    'right_rear_forward': 25,
    'right_rear_backward': 5,
}

GPIO.setmode(GPIO.BCM)
for pin in motor_pins.values():
    GPIO.setup(pin, GPIO.OUT)

def move_forward():
    GPIO.output(motor_pins['left_front_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_front_backward'], GPIO.LOW)
    GPIO.output(motor_pins['right_front_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_front_backward'], GPIO.LOW)
    GPIO.output(motor_pins['left_rear_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_rear_backward'], GPIO.LOW)
    GPIO.output(motor_pins['right_rear_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_rear_backward'], GPIO.LOW)

def move_backward():
    GPIO.output(motor_pins['left_front_forward'], GPIO.LOW)
    GPIO.output(motor_pins['left_front_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_front_forward'], GPIO.LOW)
    GPIO.output(motor_pins['right_front_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_rear_forward'], GPIO.LOW)
    GPIO.output(motor_pins['left_rear_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_rear_forward'], GPIO.LOW)
    GPIO.output(motor_pins['right_rear_backward'], GPIO.HIGH)

def move_left():
    GPIO.output(motor_pins['left_front_forward'], GPIO.LOW)
    GPIO.output(motor_pins['left_front_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_front_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_front_backward'], GPIO.LOW)
    GPIO.output(motor_pins['left_rear_forward'], GPIO.LOW)
    GPIO.output(motor_pins['left_rear_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_rear_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['right_rear_backward'], GPIO.LOW)

def move_right():
    GPIO.output(motor_pins['left_front_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_front_backward'], GPIO.LOW)
    GPIO.output(motor_pins['right_front_forward'], GPIO.LOW)
    GPIO.output(motor_pins['right_front_backward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_rear_forward'], GPIO.HIGH)
    GPIO.output(motor_pins['left_rear_backward'], GPIO.LOW)
    GPIO.output(motor_pins['right_rear_forward'], GPIO.LOW)
    GPIO.output(motor_pins['right_rear_backward'], GPIO.HIGH)

def stop():
    for pin in motor_pins.values():
        GPIO.output(pin, GPIO.LOW)

# Function to compute depth from disparity using CUDA
mod = SourceModule("""
_global_ void process_depth(float *disparity, float *depth, float focal_length, float baseline) {
    int idx = threadIdx.x + blockDim.x * blockIdx.x;
    if (disparity[idx] != 0) {
        depth[idx] = (focal_length * baseline) / disparity[idx];
    } else {
        depth[idx] = 0;
    }
}
""")

process_depth = mod.get_function("process_depth")

def compute_depth_cuda(disparity, focal_length, baseline):
    disparity_gpu = cuda.mem_alloc(disparity.nbytes)
    depth_gpu = cuda.mem_alloc(disparity.nbytes)
    cuda.memcpy_htod(disparity_gpu, disparity)
    process_depth(disparity_gpu, depth_gpu, np.float32(focal_length), np.float32(baseline), block=(512, 1, 1), grid=(disparity.size // 512, 1))
    depth = np.empty_like(disparity)
    cuda.memcpy_dtoh(depth, depth_gpu)
    return depth

# Stereo camera setup
cap_left = cv2.VideoCapture(0)  # Left camera
cap_right = cv2.VideoCapture(1)  # Right camera

# Advanced stereo matching using StereoSGBM with CUDA optimization
def stereo_matching_cuda(left_img, right_img):
    window_size = 5
    min_disp = 0
    num_disp = 16 * 5
    stereo = cv2.cuda.createStereoSGM(minDisparity=min_disp,
                                      numDisparities=num_disp,
                                      blockSize=window_size,
                                      P1=8 * 3 * window_size ** 2,
                                      P2=32 * 3 * window_size ** 2,
                                      disp12MaxDiff=1,
                                      uniquenessRatio=15,
                                      speckleWindowSize=200,
                                      speckleRange=2,
                                      preFilterCap=63,
                                      mode=cv2.STEREO_SGBM_MODE_SGBM_3WAY)
    left_gpu = cv2.cuda_GpuMat()
    right_gpu = cv2.cuda_GpuMat()
    left_gpu.upload(left_img)
    right_gpu.upload(right_img)
    disparity_gpu = stereo.compute(left_gpu, right_gpu).download()
    return disparity_gpu

# Function to detect craters using OpenCV
def detect_craters(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blurred = cv2.GaussianBlur(gray, (15, 15), 0)
    edges = cv2.Canny(blurred, 50, 150)
    contours, _ = cv2.findContours(edges, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    
    craters = []
    for cnt in contours:
        if len(cnt) >= 5:
            ellipse = cv2.fitEllipse(cnt)
            craters.append(ellipse)
    
    return craters

# Main crater detection and avoidance function
def crater_detection():
    focal_length = 700  # Example focal length in pixels
    baseline = 0.2  # Baseline distance in meters (20 cm)
    pixels_per_cm = 5  # Example scale, adjust based on calibration

    while True:
        ret_left, frame_left = cap_left.read()
        ret_right, frame_right = cap_right.read()
        if not ret_left or not ret_right:
            break

        # Detect craters
        craters = detect_craters(frame_left)

        # Stereo matching
        gray_left = cv2.cvtColor(frame_left, cv2.COLOR_BGR2GRAY)
        gray_right = cv2.cvtColor(frame_right, cv2.COLOR_BGR2GRAY)
        disparity = stereo_matching_cuda(gray_left, gray_right)
        depth_map = compute_depth_cuda(disparity, focal_length, baseline)

        # Process detected craters
        for (ellipse) in craters:
            (x, y), (MA, ma), angle = ellipse
            center = (int(x), int(y))
            radius_pixels = int(ma / 2)
            radius_cm = radius_pixels / pixels_per_cm
            
            # Draw the ellipse and center
            cv2.ellipse(frame_left, ellipse, (0, 255, 0), 2)
            cv2.circle(frame_left, center, 5, (0, 0, 255), -1)
            
            # Calculate distance of the crater
            depth = depth_map[int(y), int(x)]
            label = f'Radius: {radius_cm:.2f} cm, Depth: {depth:.2f} m'
            cv2.putText(frame_left, label, (center[0] + 10, center[1] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
            
            # Navigation logic based on crater radius and depth
            if radius_cm < 10:
                move_forward()
            else:
                if depth < 1.0:
                    if x < frame_left.shape[1] / 2:
                        move_right()
                    else:
                        move_left()
                else:
                    stop()

        # Display the result
        cv2.imshow('Crater Detection', frame_left)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Clean up
    cap_left.release()
    cap_right.release()
    cv2.destroyAllWindows()
    GPIO.cleanup()

# Run the crater detection function
if _name_ == "_main_":
    crater_detection()
